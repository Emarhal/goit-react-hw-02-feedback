{"version":3,"sources":["Components/feedback/feedbackOptions/FeedbackOptions.js","Components/feedback/Feedback.js","Components/feedback/section/Section.js","Components/feedback/notification/Notification.js","Components/feedback/statistics/Statistics.js","Components/App.js","index.js","Components/feedback/feedbackOptions/FeedbackOptions.module.css"],"names":["FeedbackOptions","onLeaveFeedback","type","className","styles","good","onClick","neutral","bad","Feedback","Notification","propTypes","title","PropTypes","string","isRequired","children","node","Section","toUpperCase","message","Statistics","total","positivePercentage","App","state","scoreName","setState","prevState","oldValue","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"+MAkCeA,EA9BS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACzB,OACE,qCACE,wBACEC,KAAK,SACLC,UAAWC,IAAOC,KAClBC,QAAS,kBAAML,EAAgB,SAHjC,kBAOA,wBACEC,KAAK,SACLC,UAAWC,IAAOG,QAClBD,QAAS,kBAAML,EAAgB,YAHjC,qBAOA,wBACEC,KAAK,SACLC,UAAWC,IAAOI,IAClBF,QAAS,kBAAML,EAAgB,QAHjC,qBCJSQ,EAbE,SAAC,GAAyB,IAAvBR,EAAsB,EAAtBA,gBAClB,OACE,mCACE,8BACE,cAAC,EAAD,CAAiBA,gBAAiBA,S,gBCI1CS,aAAaC,UAAY,CACvBC,MAAOC,IAAUC,OAAOC,WACxBC,SAAUH,IAAUI,KAAKF,YAGZG,MAdC,SAAC,GAAyB,IAAvBF,EAAsB,EAAtBA,SAAUJ,EAAY,EAAZA,MAC3B,OACE,qCACE,6BAAKA,EAAMO,gBACVH,MCIQN,EARM,SAAC,GAAiB,IAAfU,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KC0BEC,EA1BI,SAAC,GAAuD,IAArDhB,EAAoD,EAApDA,KAAMG,EAA8C,EAA9CA,IAAKD,EAAyC,EAAzCA,QAASe,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,8BACGD,EACC,gCACE,qCAAQjB,KACR,wCAAWE,KACX,oCAAOC,KACP,uCAAUc,KACV,mDAAsBC,EAAtB,UAGF,cAAC,EAAD,CAAcH,QAAQ,yBCkCfI,E,4MA5CbC,MAAQ,CAAEpB,KAAM,EAAGE,QAAS,EAAGC,IAAK,G,EAEpCP,gBAAkB,SAACyB,GACjB,EAAKC,UAAS,SAACC,GACb,IAAMC,EAAWD,EAAUF,GAC3B,OAAO,eACJA,EAAYG,EAAW,O,EAI9BC,mBAAqB,WACnB,MAA+B,EAAKL,MAEpC,OAFA,EAAQpB,KAAR,EAAcE,QAAd,EAAuBC,K,EAKzBuB,gCAAkC,WAChC,IAAQ1B,EAAS,EAAKoB,MAAdpB,KACFiB,EAAQ,EAAKQ,qBAEnB,OADyBR,EAAQU,KAAKC,MAAO5B,EAAOiB,EAAS,KAAO,G,4CAGtE,WACE,IAAMA,EAAQY,KAAKJ,qBACbP,EAAqBW,KAAKH,kCAChC,OACE,qCACE,cAAC,EAAD,CAASnB,MAAM,sBAAf,SACE,cAAC,EAAD,CAAUX,gBAAiBiC,KAAKjC,oBAElC,cAAC,EAAD,CAASW,MAAM,aAAf,SACE,cAAC,EAAD,CACEP,KAAM6B,KAAKT,MAAMpB,KACjBG,IAAK0B,KAAKT,MAAMjB,IAChBD,QAAS2B,KAAKT,MAAMlB,QACpBe,MAAOA,EACPC,mBAAoBA,a,GArCdY,a,MCAlBC,IAASC,OACP,mCAEE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BC,EAAOC,QAAU,CAAC,KAAO,8BAA8B,QAAU,iCAAiC,IAAM,gC","file":"static/js/main.77554a4e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from \"./FeedbackOptions.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      <button\r\n        type=\"button\"\r\n        className={styles.good}\r\n        onClick={() => onLeaveFeedback(\"good\")}\r\n      >\r\n        Good\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        className={styles.neutral}\r\n        onClick={() => onLeaveFeedback(\"neutral\")}\r\n      >\r\n        Neutral\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        className={styles.bad}\r\n        onClick={() => onLeaveFeedback(\"bad\")}\r\n      >\r\n        Bad\r\n      </button>\r\n    </>\r\n  );\r\n};\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport FeedbackOptions from \"./feedbackOptions/FeedbackOptions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Feedback = ({ onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <FeedbackOptions onLeaveFeedback={onLeaveFeedback} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nFeedback.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\nexport default Feedback;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ children, title }) => {\r\n  return (\r\n    <>\r\n      <h2>{title.toUpperCase()}</h2>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nNotification.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport Notification from \"../notification/Notification\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, bad, neutral, total, positivePercentage }) => {\r\n  return (\r\n    <div>\r\n      {total ? (\r\n        <div>\r\n          <p>Good{good}</p>\r\n          <p>Neutral{neutral}</p>\r\n          <p>Bad{bad}</p>\r\n          <p>Total:{total}</p>\r\n          <p>Positive feedback:{positivePercentage}%</p>\r\n        </div>\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React, { Component } from \"react\";\nimport Feedback from \"./feedback/Feedback\";\nimport Section from \"./feedback/section/Section\";\nimport Statistics from \"./feedback/statistics/Statistics\";\n\nclass App extends Component {\n  state = { good: 0, neutral: 0, bad: 0 };\n\n  onLeaveFeedback = (scoreName) => {\n    this.setState((prevState) => {\n      const oldValue = prevState[scoreName];\n      return {\n        [scoreName]: oldValue + 1,\n      };\n    });\n  };\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    const total = good + neutral + bad;\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    const positiveFeedback = total ? Math.round((good / total) * 100) : 0;\n    return positiveFeedback;\n  };\n  render() {\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n    return (\n      <>\n        <Section title=\"Pleas live feedback\">\n          <Feedback onLeaveFeedback={this.onLeaveFeedback} />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={this.state.good}\n            bad={this.state.bad}\n            neutral={this.state.neutral}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <>\n    {/* <h2>Hello</h2> */}\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"good\":\"FeedbackOptions_good__1eNXn\",\"neutral\":\"FeedbackOptions_neutral__2KNPI\",\"bad\":\"FeedbackOptions_bad__2EMOP\"};"],"sourceRoot":""}